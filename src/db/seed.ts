#!/usr/bin/env tsx
import { randomUUID } from 'node:crypto';
import path from 'node:path';
import dotenv from 'dotenv';
import { and, count, eq } from 'drizzle-orm';
import { drizzle } from 'drizzle-orm/postgres-js';
import { reset, seed } from 'drizzle-seed';
import postgres from 'postgres';
import * as schema from '@/db/schema';

// .env.local„ÇíË™≠„ÅøËæº„ÇÄ
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error('‚ùå DATABASE_URL „ÅåÊú™Ë®≠ÂÆö„ÅÆ„Åü„ÇÅ„Ç∑„Éº„Éâ„Çí‰∏≠Ê≠¢„Åó„Åæ„Åó„Åü');
  process.exit(1);
}

const nodeEnv = process.env.NODE_ENV ?? 'development';
const isDevelopment = nodeEnv === 'development';

if (nodeEnv === 'production') {
  console.error('‚ùå Êú¨Áï™Áí∞Â¢É„Åß„ÅØ„Ç∑„Éº„Éâ„ÇíÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì');
  process.exit(1);
}

let databaseUrl: URL | null = null;
try {
  databaseUrl = new URL(connectionString);
} catch {
  console.error(
    '‚ùå DATABASE_URL „Åå‰∏çÊ≠£„Å™ÂΩ¢Âºè„Åß„Åô„ÄÇÈñãÁô∫Áí∞Â¢É‰ª•Â§ñ„Åß„ÅÆ„É™„Çª„ÉÉ„Éà„ÇíÈò≤„Åê„Åü„ÇÅ‰∏≠Ê≠¢„Åó„Åæ„Åô',
  );
  process.exit(1);
}

const hostname = databaseUrl?.hostname ?? '';

const isLocalHostname = (target: string) => {
  if (!target) return false;
  if (['localhost', '127.0.0.1', '::1', 'db'].includes(target)) return true;
  if (target.endsWith('.local')) return true;
  if (/^192\.168\./u.test(target)) return true;
  if (/^10\./u.test(target)) return true;
  if (/^172\.(1[6-9]|2\d|3[01])\./u.test(target)) return true;
  // Êã°ÂºµÂ≠ê„ÇíÊåÅ„Åü„Å™„ÅÑ„Éõ„Çπ„ÉàÂêçÔºàDocker „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Å™„Å©Ôºâ„ÅØ„É≠„Éº„Ç´„É´Êâ±„ÅÑ
  if (!target.includes('.')) return true;
  return false;
};

const isExplicitlyBlocked =
  hostname.includes('supabase.co') || hostname.includes('neon.tech');

if (!isDevelopment || !isLocalHostname(hostname) || isExplicitlyBlocked) {
  console.error(
    '‚ùå Reset „ÅØ„É≠„Éº„Ç´„É´ÈñãÁô∫Áí∞Â¢É (NODE_ENV=development „Åã„Å§„É≠„Éº„Ç´„É´„Éõ„Çπ„Éà) „Åß„ÅÆ„ÅøÂÆüË°å„Åß„Åç„Åæ„Åô',
  );
  process.exit(1);
}

const sql = postgres(connectionString, { max: 1 });
const db = drizzle(sql);

async function main() {
  console.log('üå± Seeding database with sample data...');

  try {
    // drizzle-seed„ÅÆresetÊ©üËÉΩ„Çí‰ΩøÁî®„Åó„Å¶„Éá„Éº„Çø„Éô„Éº„Çπ„Çí„É™„Çª„ÉÉ„Éà
    console.log('üóëÔ∏è  Resetting database using drizzle-seed reset...');
    await reset(db, schema);
    console.log('‚úÖ Database reset completed');

    // „Çµ„É≥„Éó„É´„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
    console.log('üë§ Creating sample users...');
    const sampleUsers = [
      {
        id: 'user-1',
        email: 'john@example.com',
        emailVerified: true,
        name: 'John Doe',
        image: null,
        lineUserId: null,
        lineUserName: null,
        lastLoginAt: new Date('2025-01-01T10:00:00Z'),
      },
      {
        id: 'user-2',
        email: 'jane@example.com',
        emailVerified: true,
        name: 'Jane Smith',
        image: null,
        lineUserId: null,
        lineUserName: null,
        lastLoginAt: new Date('2025-01-10T15:30:00Z'),
      },
      {
        id: 'user-3',
        email: 'bob@example.com',
        emailVerified: true,
        name: 'Bob Johnson',
        image: null,
        lineUserId: null,
        lineUserName: null,
        lastLoginAt: null,
      },
      {
        id: 'user-4',
        email: `no-email-U123456789@line.local`,
        emailVerified: true,
        name: 'LINE User',
        image: 'https://example.com/line-profile.jpg',
        lineUserId: 'U123456789',
        lineUserName: 'LINE„É¶„Éº„Ç∂„Éº',
        lastLoginAt: new Date('2025-01-15T09:00:00Z'),
      },
    ];

    await db.insert(schema.user).values(sampleUsers);
    console.log(`‚úÖ Created ${sampleUsers.length} sample users`);

    // drizzle-seed„ÅßTODO„Çµ„É≥„Éó„É´„Éá„Éº„Çø„ÇíÁîüÊàê
    console.log('üìù Generating sample todos with drizzle-seed...');

    // seed„Å´Ê∏°„Åô„Çπ„Ç≠„Éº„Éû„ÇíÂÆöÁæ©
    const seedSchema = {
      todos: schema.todos,
    };

    // drizzle-seed„ÇíÂÆüË°å„Åó„Å¶TODO„Éá„Éº„Çø„ÇíÁîüÊàê
    await seed(db, seedSchema, { count: 20, seed: 12345 }).refine((funcs) => ({
      todos: {
        columns: {
          id: funcs.uuid(),
          userId: funcs.valuesFromArray({
            values: sampleUsers.map((user) => user.id),
          }),
          title: funcs.valuesFromArray({
            values: [
              'Complete the project documentation',
              'Review code for security vulnerabilities',
              'Update the user interface design',
              'Implement the new feature',
              'Fix the reported bugs',
              'Write unit tests for the new module',
              'Optimize database queries',
              'Deploy the application to production',
              'Conduct user acceptance testing',
              'Prepare the quarterly report',
              'Schedule team meeting',
              'Update the project roadmap',
              'Review pull requests',
              'Setup monitoring and alerts',
              'Backup the database',
              'Update dependencies',
              'Refactor legacy code',
              'Create API documentation',
              'Setup CI/CD pipeline',
              'Perform load testing',
            ],
          }),
          completed: funcs.weightedRandom([
            { value: funcs.boolean(), weight: 0.3 }, // 30% completed
            { value: funcs.default({ defaultValue: false }), weight: 0.7 }, // 70% incomplete
          ]),
        },
      },
    }));

    console.log('‚úÖ Sample todos created successfully with drizzle-seed');

    // RFC 4122Ê∫ñÊã†„ÅÆUUID„Å´Êõ¥Êñ∞Ôºàdrizzle-seed„ÅÆ„Éê„Ç∞ÂõûÈÅøÔºâ
    // Ê≥®ÊÑè: drizzle-seed v0.3.1 „Å´„ÅØ UUIDÁîüÊàê„ÅÆ„Éê„Ç∞„Åå„ÅÇ„Çä„Åæ„Åô
    // ÁîüÊàê„Åï„Çå„ÇãUUID„ÅÆ17Áï™ÁõÆ„ÅÆÊñáÂ≠óÔºàvariant digitÔºâ„Åå RFC 4122 „Å´Ê∫ñÊã†„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì
    // „Åì„ÅÆÂïèÈ°å„Å´„Çà„Çä„ÄÅZod „ÅÆ z.uuid() „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„ÅåÂ§±Êïó„Åô„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô
    console.log('üîß Updating UUIDs to be RFC 4122 compliant...');

    // TODO„ÅÆUUID„ÇíÊõ¥Êñ∞
    const todosToUpdate = await db
      .select({ id: schema.todos.id })
      .from(schema.todos);

    for (const todo of todosToUpdate) {
      const newId = randomUUID();
      await db
        .update(schema.todos)
        .set({ id: newId })
        .where(eq(schema.todos.id, todo.id));
    }
    console.log(`‚úÖ Updated ${todosToUpdate.length} todo UUIDs`);

    // ÊúÄÁµÇÁöÑ„Å™Áµ±Ë®à„ÇíË°®Á§∫
    const finalTodoCount = await db
      .select({ count: count() })
      .from(schema.todos);

    const userTodoStats = await Promise.all(
      sampleUsers.map(async (user) => {
        const userTodos = await db
          .select({ count: count() })
          .from(schema.todos)
          .where(eq(schema.todos.userId, user.id));

        const completedTodos = await db
          .select({ count: count() })
          .from(schema.todos)
          .where(
            and(
              eq(schema.todos.userId, user.id),
              eq(schema.todos.completed, true),
            ),
          );

        return {
          user: user.name,
          totalTodos: userTodos[0]?.count || 0,
          completedTodos: completedTodos[0]?.count || 0,
        };
      }),
    );

    console.log('üìä Seeding Summary:');
    console.log(`   Total Users: ${sampleUsers.length}`);
    console.log(`   Total TODOs: ${finalTodoCount[0]?.count || 0}`);
    console.log('   User TODO Statistics:');

    for (const stat of userTodoStats) {
      console.log(
        `     ${stat.user}: ${stat.totalTodos} todos (${stat.completedTodos} completed)`,
      );
    }

    console.log('‚úÖ Database seeded successfully');
    await sql.end();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    await sql.end();
    process.exit(1);
  }
}

main();
