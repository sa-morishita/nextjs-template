name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # 手動実行を許可

env:
  NODE_VERSION: "22.15.1"
  PNPM_VERSION: "9"

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Debug Git and Biome environment
        run: |
          echo "=== Environment Info ==="
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "Biome version: $(pnpm biome --version)"
          
          echo -e "\n=== Git Configuration ==="
          git --version
          git config --list | grep -E "(safe|sparse|cone)" || true
          
          echo -e "\n=== Git Directory Structure ==="
          if [ -d ".git" ]; then
            echo ".git directory exists"
            ls -la .git/info/ || true
            if [ -f ".git/info/sparse-checkout" ]; then
              echo "Sparse checkout file content:"
              cat .git/info/sparse-checkout
            fi
          else
            echo ".git directory NOT found"
          fi
          
          echo -e "\n=== Files in repository ==="
          find . -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | head -10
          
          echo -e "\n=== Testing different Biome configurations ==="
          echo "1. With vcs disabled:"
          pnpm biome check . --vcs-enabled=false || true
          
          echo -e "\n2. Without useIgnoreFile:"
          pnpm biome check . --vcs-use-ignore-file=false || true
          
          echo -e "\n3. Listing files Biome can see:"
          pnpm biome check . --vcs-enabled=false --verbose 2>&1 | grep -A 20 "Files processed:" || true
          
          echo -e "\n=== Testing with minimal config ==="
          echo '{"files": {"includes": ["**/*.ts", "**/*.tsx"]}}' > biome.test.json
          echo "Created test config:"
          cat biome.test.json
          echo -e "\nTesting with minimal config:"
          pnpm biome check . --config-path=./biome.test.json || true
          
          echo -e "\n=== Checking specific file directly ==="
          echo "Testing specific file:"
          pnpm biome check ./src/app/error.tsx --verbose || true
          
          echo -e "\n=== Testing with glob patterns ==="
          echo "Testing with src/**/*.ts pattern:"
          pnpm biome check 'src/**/*.ts' || true
          echo -e "\nTesting with src/**/*.tsx pattern:"
          pnpm biome check 'src/**/*.tsx' || true
          
          echo -e "\n=== Checking biome.json includes configuration ==="
          cat biome.json | jq '.files.includes'
          
          echo -e "\n=== Testing without the current biome.json ==="
          mv biome.json biome.json.backup
          echo "Running biome without config file:"
          pnpm biome check . || true
          mv biome.json.backup biome.json
          
      - name: Run Biome check
        run: pnpm biome check src

      - name: Run TypeScript type check
        run: pnpm typecheck

  # unit-tests:
  #   name: Unit Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "pnpm"

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Run unit tests with coverage
  #       run: pnpm test:unit --coverage

  #     - name: Upload unit test coverage
  #       uses: codecov/codecov-action@v4
  #       with:
  #         file: ./coverage/coverage-final.json
  #         flags: unittests
  #         name: unit-tests
  #         fail_ci_if_error: false

  # integration-tests:
  #   name: Integration Tests (PGLite)
  #   runs-on: ubuntu-latest
  #   # 環境を指定してSecretsにアクセスできるようにする
  #   environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
  #   env:
  #     # 日本時間でテストを実行
  #     TZ: Asia/Tokyo
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "pnpm"

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Run integration tests
  #       run: pnpm test:integration
  #       env:
  #         # GitHub Actions レポーター有効化
  #         GITHUB_ACTIONS: "true"
  #         # ダミー環境変数（テスト用）
  #         DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
  #         BETTER_AUTH_SECRET: "dummy-secret-for-integration-tests"
  #         SUPABASE_SERVICE_ROLE_KEY: "dummy-key"
  #         NEXT_PUBLIC_SUPABASE_URL: "https://example.supabase.co"
  #         NEXT_PUBLIC_SITE_URL: "https://example.com"
  #         RESEND_API_KEY: "dummy-resend-api-key"
  #         LINE_LOGIN_CHANNEL_ID: "dummy-line-login-channel-id"
  #         LINE_LOGIN_CHANNEL_SECRET: "dummy-line-login-channel-secret"

  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "pnpm"

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Build application
  #       run: pnpm build
  #       env:
  #         # ダミー環境変数（ビルド用）
  #         DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
  #         BETTER_AUTH_SECRET: "dummy-secret-for-build"
  #         SUPABASE_SERVICE_ROLE_KEY: "dummy-key"
  #         NEXT_PUBLIC_SITE_URL: "https://example.com"
  #         NEXT_PUBLIC_SUPABASE_URL: "https://example.supabase.co"
  #         RESEND_API_KEY: "dummy-resend-api-key"
  #         LINE_LOGIN_CHANNEL_ID: "dummy-line-login-channel-id"
  #         LINE_LOGIN_CHANNEL_SECRET: "dummy-line-login-channel-secret"
  #         NEXT_PUBLIC_SENTRY_DSN: ""

  #     - name: Check build output
  #       run: |
  #         if [ ! -d ".next" ]; then
  #           echo "Build failed: .next directory not found"
  #           exit 1
  #         fi

  # security-audit:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: "pnpm"

  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: Run security audit
  #       run: pnpm audit
  #       continue-on-error: true # 脆弱性があってもCIは継続（警告として表示）
